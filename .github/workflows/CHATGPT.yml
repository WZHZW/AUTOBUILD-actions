name: CHATGPT
on:
  repository_dispatch:
  workflow_dispatch:
env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: master
  CONFIG_FILE: .config
  TZ: Asia/Shanghai
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        profile: [default]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo -E apt-get -qq install build-essential clang flex g++ gawk gcc-multilib gettext \
          git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev swig libpython3-dev aria2 jq subversion qemu-utils ccache rename libelf-dev device-tree-compiler
          sudo -E apt-get -qq purge azure-cli ghc* zulu* llvm* firefox powershell openjdk* dotnet* google* mysql* php* android*
          sudo mkdir -p /build_dir
          sudo chown $USER:$GROUPS /build_dir
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "Asia/Shanghai"
      
      - name: Clone source code
        working-directory: /build_dir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /build_dir/openwrt $GITHUB_WORKSPACE/openwrt
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ./openwrt/build_dir
            ./openwrt/staging_dir
          key: ${{ runner.os }}-${{ matrix.profile }}-${{ hashFiles('**/openwrt/feeds.conf') }}
      
      - name: Clone OpenWrt feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      
      - name: Apply custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          
      - name: Build OpenWrt
        run: |
          export TERM=xterm
          shopt -s extglob
          cd openwrt
          echo -e "$(($(nproc)+1)) thread compile"
          make -j$(($(nproc)+1)) || make V=s 
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
      
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: Release ${{ github.sha }}
          body: Automatic build from commit:${{ github.sha }}
          draft: false
          prerelease: false
      
      - name: Upload firmware
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt-Firmware
          path: bin/targets/
      
      - name: Attach firmware to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/targets/
          asset_name: OpenWrt-Firmware-${{ matrix.profile }}-${{ github.sha }}.zip
          asset_content_type: application/zip
      
      - name: Clean build cache
        run: |
          make clean
          rm -rf ./tmp
          rm -rf ./dl
      
      - name: Push changes to GitHub
        if: success()
        uses: stefanzweifel/git-auto-commit-action@v4.16.0
        with:
          commit_message: "Automatic commit - ${{ matrix.profile }} build"
          commit_options: '--author="OpenWrt Build Server <>"'
          repository: ${{ github.repository }}
          branch: ${{ github.ref }}
          commit_user_name: OpenWrt Build Server
          commit_user_email: openwrtbuildserver@example.com
      
      - name: Release OpenWrt Firmware
        if: success()
        uses: softprops/action-gh-release@v0.1.15
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            bin/targets/*.zip
          draft: false
          prerelease: false
          name: Release ${{ github.sha }}
          tag_name: ${{ github.sha }}
          body: Automatic build from commit:${{ github.sha }}
